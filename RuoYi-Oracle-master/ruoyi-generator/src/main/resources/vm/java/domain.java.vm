package ${packageName}.domain;

#foreach ($import in $importList)
import ${import};
#end
import com.fasterxml.jackson.annotation.JsonFormat;
import ${basePathInfo}.common.annotation.Excel;
import com.baomidou.mybatisplus.annotation.TableField;
import com.baomidou.mybatisplus.annotation.TableId;
import com.baomidou.mybatisplus.annotation.TableName;
import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.Data;
import lombok.ToString;
#if($table.crud || $table.sub)
import ${basePathInfo}.common.core.domain.BaseEntity;
#elseif($table.tree)
import ${basePathInfo}.common.core.domain.TreeEntity;

#end

/**
* ${functionName}对象 ${tableName}
*
* @author ${author}
* @date ${datetime}
*/
#if($table.crud || $table.sub)
#set($Entity="BaseEntity")
#elseif($table.tree)
#set($Entity="TreeEntity")
#end
@TableName("${tableName}")
@Data
@ToString(callSuper = true)
@JsonInclude(value = JsonInclude.Include.NON_EMPTY)
public class ${ClassName} extends ${Entity}
{
private static final long serialVersionUID=1L;

#foreach ($column in $columns)
#if(!$table.isSuperColumn($column.javaField))
/** $column.columnComment */
#if($column.list)
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
    #set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
    #set($comment=$column.columnComment)
#end
#if($parentheseIndex != -1)
@Excel(name = "${comment}" , readConverterExp = "$column.readConverterExp()")
#elseif($column.javaType == 'Date')
@Excel(name = "${comment}" , width = 30, dateFormat = "yyyy-MM-dd")
@JsonFormat(pattern = "yyyy-MM-dd")
#else
@Excel(name = "${comment}")
#end
#end
#if($column.isPk!=1)
@TableField("$column.columnName")
#else
@TableId("$column.columnName")
#end
private $column.javaType $column.javaField;

#end
#end
#if($table.sub)
/** $table.subTable.functionName信息 */
private List<${subClassName}> ${subclassName}List;

#end

#if($table.sub)
public List<${subClassName}> get${subClassName}List()
{
return ${subclassName}List;
}

public void set${subClassName}List(List<${subClassName}> ${subclassName}List)
{
this.${subclassName}List = ${subclassName}List;
}

#end
}
